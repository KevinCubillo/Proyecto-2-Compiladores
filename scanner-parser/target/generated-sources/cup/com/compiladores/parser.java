
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\003\000\002\040\003\000\002\032" +
    "\003\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\005\000\002\032\005\000\002\033\005\000" +
    "\002\034\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\004\000\002\010\003\000\002\010\003\000\002\013" +
    "\011\000\002\014\007\000\002\015\011\000\002\016\007" +
    "\000\002\017\023\000\002\017\021\000\002\017\017\000" +
    "\002\030\005\000\002\026\007\000\002\027\003\000\002" +
    "\027\004\000\002\031\011\000\002\031\012\000\002\031" +
    "\011\000\002\043\005\000\002\020\004\000\002\021\006" +
    "\000\002\022\006\000\002\023\006\000\002\024\006\000" +
    "\002\053\003\000\002\053\005\000\002\025\006\000\002" +
    "\025\005\000\002\046\004\000\002\044\006\000\002\044" +
    "\004\000\002\045\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\004\000\002\006\005\000\002\007\003\000" +
    "\002\007\005\000\002\007\003\000\002\042\005\000\002" +
    "\003\011\000\002\003\010\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\003\000\002\052\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\047\003\000\002" +
    "\047\003\000\002\050\003\000\002\050\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\020\037\012\056\025\057\004\060\011\061" +
    "\007\062\015\070\024\001\002\000\004\034\uffff\001\002" +
    "\000\022\002\uff9e\037\012\056\025\057\004\060\011\061" +
    "\007\062\015\070\024\001\002\000\022\002\uffa2\037\uffa2" +
    "\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\070\uffa2\001" +
    "\002\000\004\034\ufffd\001\002\000\004\034\323\001\002" +
    "\000\004\034\ufffe\001\002\000\026\002\uff9a\010\uff9a\033" +
    "\uff9a\037\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\070\uff9a\001\002\000\016\002\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\001\002\000\026\002\uff99\010\uff99" +
    "\033\uff99\037\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\070\uff99\001\002\000\004\034\ufffc\001\002\000\004" +
    "\007\126\001\002\000\004\002\125\001\002\000\022\002" +
    "\uffa3\037\012\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\070\024\001\002\000\006\016\034\017\033\001\002\000" +
    "\016\002\uff9d\056\025\057\004\060\011\061\007\062\015" +
    "\001\002\000\022\002\uffa0\037\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\070\uffa0\001\002\000\026\002\uff9b" +
    "\010\uff9b\033\uff9b\037\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\070\uff9b\001\002\000\004\034\000\001\002" +
    "\000\022\002\uffa1\037\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\070\uffa1\001\002\000\016\002\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\001\002\000\004\034" +
    "\031\001\002\000\004\037\032\001\002\000\004\007\uffa8" +
    "\001\002\000\050\002\uffc9\032\uffc9\035\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9" +
    "\052\uffc9\054\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\070\uffc9\001\002\000\024\005\035\007\051\030\050" +
    "\037\046\063\041\064\037\065\053\066\054\067\042\001" +
    "\002\000\014\063\041\064\037\065\053\066\054\067\042" +
    "\001\002\000\014\010\uffd9\017\uffd9\026\104\027\105\033" +
    "\uffd9\001\002\000\046\004\ufffb\005\ufffb\006\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\033\ufffb" +
    "\050\ufffb\001\002\000\014\010\uffde\017\uffde\026\uffde\027" +
    "\uffde\033\uffde\001\002\000\046\004\ufff7\005\ufff7\006\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\033\ufff7\050\ufff7\001\002\000\046\004\ufff8\005\ufff8\006" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\033\ufff8\050\ufff8\001\002\000\044\004\uffee\005\uffee" +
    "\006\uffee\010\uffee\011\uffee\012\uffee\013\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\033\uffee\001\002\000\044\004\uffe5\005\uffe5\006" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\033\uffe5\001\002\000\004\017\122\001\002\000\052" +
    "\004\uffef\005\uffef\006\uffef\007\113\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\112\015\111\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\033" +
    "\uffef\001\002\000\044\004\ufff0\005\ufff0\006\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\033\ufff0" +
    "\001\002\000\024\005\035\007\051\030\050\037\046\063" +
    "\041\064\037\065\053\066\054\067\042\001\002\000\024" +
    "\005\035\007\051\030\050\037\046\063\041\064\037\065" +
    "\053\066\054\067\042\001\002\000\040\004\064\005\055" +
    "\006\067\010\uffda\011\057\012\056\013\070\017\uffda\020" +
    "\072\021\063\022\062\023\065\024\066\025\061\033\uffda" +
    "\001\002\000\046\004\ufffa\005\ufffa\006\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\033\ufffa\050" +
    "\ufffa\001\002\000\046\004\ufff9\005\ufff9\006\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\033\ufff9" +
    "\050\ufff9\001\002\000\022\005\ufff5\007\ufff5\037\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\001\002\000\022" +
    "\005\ufff2\007\ufff2\037\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\001\002\000\022\005\ufff3\007\ufff3\037\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000" +
    "\022\005\035\007\073\037\046\063\041\064\037\065\053" +
    "\066\054\067\042\001\002\000\022\005\uffe8\007\uffe8\037" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\001\002" +
    "\000\022\005\uffeb\007\uffeb\037\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\001\002\000\022\005\uffec\007\uffec" +
    "\037\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\001" +
    "\002\000\022\005\ufff6\007\ufff6\037\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\067\ufff6\001\002\000\022\005\uffea\007" +
    "\uffea\037\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea" +
    "\001\002\000\022\005\uffe9\007\uffe9\037\uffe9\063\uffe9\064" +
    "\uffe9\065\uffe9\066\uffe9\067\uffe9\001\002\000\022\005\ufff4" +
    "\007\ufff4\037\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\001\002\000\022\005\ufff1\007\ufff1\037\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\001\002\000\022\005" +
    "\035\007\073\037\046\063\041\064\037\065\053\066\054" +
    "\067\042\001\002\000\022\005\uffed\007\uffed\037\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000\022" +
    "\005\035\007\073\037\046\063\041\064\037\065\053\066" +
    "\054\067\042\001\002\000\044\004\064\005\055\006\067" +
    "\010\uffe1\011\057\012\056\013\070\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\033\uffe1\001\002\000\020\004\064\005\055\006\067\010" +
    "\076\011\057\012\056\013\070\001\002\000\044\004\uffe0" +
    "\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\033\uffe0\001\002\000\030\004\064\005" +
    "\055\006\067\010\uffdf\011\057\012\056\013\070\017\uffdf" +
    "\026\uffdf\027\uffdf\033\uffdf\001\002\000\010\010\103\026" +
    "\104\027\105\001\002\000\034\004\064\005\055\006\067" +
    "\010\076\011\057\012\056\013\070\020\072\021\063\022" +
    "\062\023\065\024\066\025\061\001\002\000\024\005\035" +
    "\007\051\030\050\037\046\063\041\064\037\065\053\066" +
    "\054\067\042\001\002\000\014\010\uffdc\017\uffdc\026\uffdc" +
    "\027\uffdc\033\uffdc\001\002\000\024\005\uffe7\007\uffe7\030" +
    "\uffe7\037\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\001\002\000\024\005\uffe6\007\uffe6\030\uffe6\037\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000\014" +
    "\010\uffdd\017\uffdd\026\104\027\105\033\uffdd\001\002\000" +
    "\032\004\064\005\055\006\067\011\057\012\056\013\070" +
    "\020\072\021\063\022\062\023\065\024\066\025\061\001" +
    "\002\000\014\010\uffdb\017\uffdb\026\uffdb\027\uffdb\033\uffdb" +
    "\001\002\000\044\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\033\uffe2\001" +
    "\002\000\044\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\033\uffe3\001\002" +
    "\000\026\005\035\007\051\010\115\030\050\037\046\063" +
    "\041\064\037\065\053\066\054\067\042\001\002\000\006" +
    "\010\120\033\117\001\002\000\044\004\uffc1\005\uffc1\006" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\033\uffc1\001\002\000\006\010\uffc4\033\uffc4\001\002" +
    "\000\024\005\035\007\051\030\050\037\046\063\041\064" +
    "\037\065\053\066\054\067\042\001\002\000\044\004\uffc2" +
    "\005\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\033\uffc2\001\002\000\006\010\uffc3\033" +
    "\uffc3\001\002\000\050\002\uffc7\032\uffc7\035\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\045\uffc7\046\uffc7\047\uffc7\051" +
    "\uffc7\052\uffc7\054\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\070\uffc7\001\002\000\044\004\uffe4\005\uffe4\006" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\033\uffe4\001\002\000\026\002\uff98\010\uff98\033\uff98" +
    "\037\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\070" +
    "\uff98\001\002\000\004\002\001\001\002\000\022\010\130" +
    "\037\012\056\025\057\004\060\011\061\007\062\015\070" +
    "\024\001\002\000\004\034\321\001\002\000\004\031\316" +
    "\001\002\000\006\010\uffab\033\uffab\001\002\000\012\010" +
    "\uffa9\033\uffa9\037\012\070\024\001\002\000\006\010\135" +
    "\033\134\001\002\000\014\056\025\057\004\060\011\061" +
    "\007\062\015\001\002\000\004\031\136\001\002\000\036" +
    "\035\153\037\147\040\146\041\162\042\167\045\143\046" +
    "\152\052\137\054\165\056\025\057\004\060\011\061\007" +
    "\062\015\001\002\000\004\053\312\001\002\000\044\032" +
    "\uffae\035\uffae\037\uffae\040\uffae\041\uffae\042\uffae\045\uffae" +
    "\046\uffae\047\uffae\051\uffae\052\uffae\054\uffae\056\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\001\002\000\044\032\uffb9" +
    "\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\052\uffb9\054\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\001\002\000\044\032\uffbc\035" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\051\uffbc\052\uffbc\054\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\001\002\000\004\007\304\001\002" +
    "\000\004\034\302\001\002\000\004\017\301\001\002\000" +
    "\006\017\275\034\276\001\002\000\006\007\113\016\272" +
    "\001\002\000\044\032\uffb8\035\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8" +
    "\054\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\001" +
    "\002\000\044\032\uffb1\035\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\054" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002" +
    "\000\004\007\246\001\002\000\004\007\240\001\002\000" +
    "\046\032\uffb4\035\uffb4\036\234\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\054" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002" +
    "\000\044\032\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\054\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000" +
    "\044\032\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\054\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000\044" +
    "\032\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\054\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\001\002\000\044\032" +
    "\uffb3\035\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\051\uffb3\052\uffb3\054\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000\044\032\uffb6" +
    "\035\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\051\uffb6\052\uffb6\054\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\001\002\000\004\017\233\001" +
    "\002\000\044\032\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\054" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002" +
    "\000\046\032\uffb2\035\uffb2\036\227\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2" +
    "\054\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\001" +
    "\002\000\004\055\224\001\002\000\040\032\223\035\153" +
    "\037\147\040\146\041\162\042\167\045\143\046\152\052" +
    "\137\054\165\056\025\057\004\060\011\061\007\062\015" +
    "\001\002\000\004\034\172\001\002\000\044\032\uffb7\035" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\051\uffb7\052\uffb7\054\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\001\002\000\044\032\uffba\035\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\045\uffba\046\uffba\047" +
    "\uffba\051\uffba\052\uffba\054\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\001\002\000\004\037\173\001\002\000" +
    "\004\034\174\001\002\000\004\043\175\001\002\000\004" +
    "\034\176\001\002\000\004\044\177\001\002\000\004\007" +
    "\200\001\002\000\022\005\035\007\073\037\046\063\041" +
    "\064\037\065\053\066\054\067\042\001\002\000\022\004" +
    "\064\005\055\006\067\010\203\011\057\012\056\013\070" +
    "\033\202\001\002\000\022\005\035\007\073\037\046\063" +
    "\041\064\037\065\053\066\054\067\042\001\002\000\004" +
    "\031\204\001\002\000\036\035\153\037\147\040\146\041" +
    "\162\042\167\045\143\046\152\052\137\054\165\056\025" +
    "\057\004\060\011\061\007\062\015\001\002\000\040\032" +
    "\207\035\153\037\147\040\146\041\162\042\167\045\143" +
    "\046\152\052\137\054\165\056\025\057\004\060\011\061" +
    "\007\062\015\001\002\000\044\032\uffad\035\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\045\uffad\046\uffad\047\uffad\051" +
    "\uffad\052\uffad\054\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\001\002\000\044\032\uffd2\035\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2" +
    "\052\uffd2\054\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\001\002\000\022\004\064\005\055\006\067\010\212" +
    "\011\057\012\056\013\070\033\211\001\002\000\022\005" +
    "\035\007\073\037\046\063\041\064\037\065\053\066\054" +
    "\067\042\001\002\000\004\031\213\001\002\000\036\035" +
    "\153\037\147\040\146\041\162\042\167\045\143\046\152" +
    "\052\137\054\165\056\025\057\004\060\011\061\007\062" +
    "\015\001\002\000\040\032\215\035\153\037\147\040\146" +
    "\041\162\042\167\045\143\046\152\052\137\054\165\056" +
    "\025\057\004\060\011\061\007\062\015\001\002\000\044" +
    "\032\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\054\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002\000\020\004" +
    "\064\005\055\006\067\010\217\011\057\012\056\013\070" +
    "\001\002\000\004\031\220\001\002\000\036\035\153\037" +
    "\147\040\146\041\162\042\167\045\143\046\152\052\137" +
    "\054\165\056\025\057\004\060\011\061\007\062\015\001" +
    "\002\000\040\032\222\035\153\037\147\040\146\041\162" +
    "\042\167\045\143\046\152\052\137\054\165\056\025\057" +
    "\004\060\011\061\007\062\015\001\002\000\044\032\uffd4" +
    "\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\051\uffd4\052\uffd4\054\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\001\002\000\016\002\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\001\002\000\024" +
    "\005\035\007\051\030\050\037\046\063\041\064\037\065" +
    "\053\066\054\067\042\001\002\000\004\017\226\001\002" +
    "\000\044\032\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\054\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000" +
    "\004\031\230\001\002\000\036\035\153\037\147\040\146" +
    "\041\162\042\167\045\143\046\152\052\137\054\165\056" +
    "\025\057\004\060\011\061\007\062\015\001\002\000\040" +
    "\032\232\035\153\037\147\040\146\041\162\042\167\045" +
    "\143\046\152\052\137\054\165\056\025\057\004\060\011" +
    "\061\007\062\015\001\002\000\044\032\uffd5\035\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\001\002\000\044\032\uffbd\035\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\047\uffbd\051" +
    "\uffbd\052\uffbd\054\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\001\002\000\004\031\235\001\002\000\036\035" +
    "\153\037\147\040\146\041\162\042\167\045\143\046\152" +
    "\052\137\054\165\056\025\057\004\060\011\061\007\062" +
    "\015\001\002\000\040\032\237\035\153\037\147\040\146" +
    "\041\162\042\167\045\143\046\152\052\137\054\165\056" +
    "\025\057\004\060\011\061\007\062\015\001\002\000\044" +
    "\032\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\054\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\024\005" +
    "\035\007\051\030\050\037\046\063\041\064\037\065\053" +
    "\066\054\067\042\001\002\000\004\010\242\001\002\000" +
    "\004\031\243\001\002\000\036\035\153\037\147\040\146" +
    "\041\162\042\167\045\143\046\152\052\137\054\165\056" +
    "\025\057\004\060\011\061\007\062\015\001\002\000\040" +
    "\032\245\035\153\037\147\040\146\041\162\042\167\045" +
    "\143\046\152\052\137\054\165\056\025\057\004\060\011" +
    "\061\007\062\015\001\002\000\046\032\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\051\uffd8\052\uffd8\054\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\001\002\000\024\005\035\007\051" +
    "\030\050\037\046\063\041\064\037\065\053\066\054\067" +
    "\042\001\002\000\004\010\250\001\002\000\004\031\251" +
    "\001\002\000\006\047\256\051\252\001\002\000\004\050" +
    "\270\001\002\000\010\032\uffcf\047\uffcf\051\uffcf\001\002" +
    "\000\010\032\264\047\256\051\252\001\002\000\004\032" +
    "\263\001\002\000\004\034\257\001\002\000\014\063\041" +
    "\064\037\065\053\066\054\067\042\001\002\000\004\050" +
    "\261\001\002\000\036\035\153\037\147\040\146\041\162" +
    "\042\167\045\143\046\152\052\137\054\165\056\025\057" +
    "\004\060\011\061\007\062\015\001\002\000\044\032\uffd0" +
    "\035\153\037\147\040\146\041\162\042\167\045\143\046" +
    "\152\047\uffd0\051\uffd0\052\137\054\165\056\025\057\004" +
    "\060\011\061\007\062\015\001\002\000\044\032\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\051\uffcb\052\uffcb\054\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\001\002\000\044\032\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\051\uffcd\052\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\001\002\000\010\032\uffce\047\uffce\051" +
    "\uffce\001\002\000\004\032\267\001\002\000\044\032\uffcc" +
    "\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\051\uffcc\052\uffcc\054\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\001\002\000\036\035\153\037" +
    "\147\040\146\041\162\042\167\045\143\046\152\052\137" +
    "\054\165\056\025\057\004\060\011\061\007\062\015\001" +
    "\002\000\040\032\uffd1\035\153\037\147\040\146\041\162" +
    "\042\167\045\143\046\152\052\137\054\165\056\025\057" +
    "\004\060\011\061\007\062\015\001\002\000\024\005\035" +
    "\007\051\030\050\037\046\063\041\064\037\065\053\066" +
    "\054\067\042\001\002\000\004\017\274\001\002\000\044" +
    "\032\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\054\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\001\002\000\044\032" +
    "\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\052\uffbe\054\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000\024\005\035" +
    "\007\051\030\050\037\046\063\041\064\037\065\053\066" +
    "\054\067\042\001\002\000\004\017\300\001\002\000\044" +
    "\032\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\054\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002\000\044\032" +
    "\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\051\uffc0\052\uffc0\054\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002\000\004\037\303" +
    "\001\002\000\006\016\uffca\017\uffca\001\002\000\024\005" +
    "\035\007\051\030\050\037\046\063\041\064\037\065\053" +
    "\066\054\067\042\001\002\000\010\010\306\026\104\027" +
    "\105\001\002\000\004\031\307\001\002\000\036\035\153" +
    "\037\147\040\146\041\162\042\167\045\143\046\152\052" +
    "\137\054\165\056\025\057\004\060\011\061\007\062\015" +
    "\001\002\000\040\032\311\035\153\037\147\040\146\041" +
    "\162\042\167\045\143\046\152\052\137\054\165\056\025" +
    "\057\004\060\011\061\007\062\015\001\002\000\046\032" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\054\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000\004" +
    "\037\313\001\002\000\004\017\314\001\002\000\044\032" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\051\uffc6\052\uffc6\054\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\001\002\000\006\010\uffaa" +
    "\033\uffaa\001\002\000\036\035\153\037\147\040\146\041" +
    "\162\042\167\045\143\046\152\052\137\054\165\056\025" +
    "\057\004\060\011\061\007\062\015\001\002\000\040\032" +
    "\320\035\153\037\147\040\146\041\162\042\167\045\143" +
    "\046\152\052\137\054\165\056\025\057\004\060\011\061" +
    "\007\062\015\001\002\000\016\002\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\001\002\000\004\037\322\001" +
    "\002\000\006\010\uffac\033\uffac\001\002\000\004\037\324" +
    "\001\002\000\010\007\uffa8\016\uffca\017\uffca\001\002\000" +
    "\022\002\uff9f\037\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\070\uff9f\001\002\000\016\002\uff9c\056\025\057" +
    "\004\060\011\061\007\062\015\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\032\002\007\003\012\004\021\005\016\020" +
    "\005\022\025\042\015\043\020\047\013\050\017\051\022" +
    "\052\004\001\001\000\002\001\001\000\026\002\007\003" +
    "\012\004\325\020\005\022\025\042\015\043\020\047\013" +
    "\050\017\051\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\123\001\001" +
    "\000\002\001\001\000\010\002\027\003\026\042\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\044\025\042\032\051\033\037\034\035\035\046\041" +
    "\043\001\001\000\004\035\122\001\001\000\004\040\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\025\042\032\106\033\037\034\107\035\046\041\043" +
    "\001\001\000\016\025\042\032\100\033\037\034\077\035" +
    "\046\041\043\001\001\000\006\036\070\037\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\042\032\076" +
    "\035\046\041\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\042\032\073\035\046\041\043\001\001\000\002" +
    "\001\001\000\012\025\042\032\074\035\046\041\043\001" +
    "\001\000\004\036\070\001\001\000\004\036\070\001\001" +
    "\000\002\001\001\000\004\036\070\001\001\000\004\040" +
    "\101\001\001\000\006\036\070\037\057\001\001\000\016" +
    "\025\042\032\106\033\037\034\105\035\046\041\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\101\001\001\000\006\036\070\037\057\001" +
    "\001\000\004\040\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\115\025\042\032\051\033\037\034" +
    "\035\035\046\041\043\053\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\120\025" +
    "\042\032\051\033\037\034\035\035\046\041\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\126\006\130\007\132\047\013\050\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\123\001\001\000\002\001\001\000\006\002\126\006" +
    "\314\001\001\000\002\001\001\000\050\002\143\011\137" +
    "\012\165\013\153\014\157\015\163\016\150\017\155\020" +
    "\141\021\162\022\170\023\140\024\147\025\144\031\156" +
    "\043\020\044\167\045\160\046\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\002\143\011\205\013\153\014\157\015\163\016\150\017" +
    "\155\020\141\021\162\022\170\023\140\024\147\025\144" +
    "\031\156\043\020\044\167\045\160\046\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\042" +
    "\032\200\035\046\041\043\001\001\000\004\036\070\001" +
    "\001\000\012\025\042\032\207\035\046\041\043\001\001" +
    "\000\002\001\001\000\050\002\143\011\137\012\204\013" +
    "\153\014\157\015\163\016\150\017\155\020\141\021\162" +
    "\022\170\023\140\024\147\025\144\031\156\043\020\044" +
    "\167\045\160\046\154\001\001\000\046\002\143\011\205" +
    "\013\153\014\157\015\163\016\150\017\155\020\141\021" +
    "\162\022\170\023\140\024\147\025\144\031\156\043\020" +
    "\044\167\045\160\046\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\070\001\001\000\012\025\042" +
    "\032\215\035\046\041\043\001\001\000\002\001\001\000" +
    "\050\002\143\011\137\012\213\013\153\014\157\015\163" +
    "\016\150\017\155\020\141\021\162\022\170\023\140\024" +
    "\147\025\144\031\156\043\020\044\167\045\160\046\154" +
    "\001\001\000\046\002\143\011\205\013\153\014\157\015" +
    "\163\016\150\017\155\020\141\021\162\022\170\023\140" +
    "\024\147\025\144\031\156\043\020\044\167\045\160\046" +
    "\154\001\001\000\002\001\001\000\004\036\070\001\001" +
    "\000\002\001\001\000\050\002\143\011\137\012\220\013" +
    "\153\014\157\015\163\016\150\017\155\020\141\021\162" +
    "\022\170\023\140\024\147\025\144\031\156\043\020\044" +
    "\167\045\160\046\154\001\001\000\046\002\143\011\205" +
    "\013\153\014\157\015\163\016\150\017\155\020\141\021" +
    "\162\022\170\023\140\024\147\025\144\031\156\043\020" +
    "\044\167\045\160\046\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\224\025\042\032\051\033\037" +
    "\034\035\035\046\041\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\143\011\137" +
    "\012\230\013\153\014\157\015\163\016\150\017\155\020" +
    "\141\021\162\022\170\023\140\024\147\025\144\031\156" +
    "\043\020\044\167\045\160\046\154\001\001\000\046\002" +
    "\143\011\205\013\153\014\157\015\163\016\150\017\155" +
    "\020\141\021\162\022\170\023\140\024\147\025\144\031" +
    "\156\043\020\044\167\045\160\046\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\143\011\137\012\235\013\153\014\157\015\163\016\150" +
    "\017\155\020\141\021\162\022\170\023\140\024\147\025" +
    "\144\031\156\043\020\044\167\045\160\046\154\001\001" +
    "\000\046\002\143\011\205\013\153\014\157\015\163\016" +
    "\150\017\155\020\141\021\162\022\170\023\140\024\147" +
    "\025\144\031\156\043\020\044\167\045\160\046\154\001" +
    "\001\000\002\001\001\000\020\010\240\025\042\032\051" +
    "\033\037\034\035\035\046\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\002\143\011\137\012\243" +
    "\013\153\014\157\015\163\016\150\017\155\020\141\021" +
    "\162\022\170\023\140\024\147\025\144\031\156\043\020" +
    "\044\167\045\160\046\154\001\001\000\046\002\143\011" +
    "\205\013\153\014\157\015\163\016\150\017\155\020\141" +
    "\021\162\022\170\023\140\024\147\025\144\031\156\043" +
    "\020\044\167\045\160\046\154\001\001\000\002\001\001" +
    "\000\020\010\246\025\042\032\051\033\037\034\035\035" +
    "\046\041\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\252\027\253\030\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\264\030\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\257\001" +
    "\001\000\002\001\001\000\050\002\143\011\137\012\261" +
    "\013\153\014\157\015\163\016\150\017\155\020\141\021" +
    "\162\022\170\023\140\024\147\025\144\031\156\043\020" +
    "\044\167\045\160\046\154\001\001\000\046\002\143\011" +
    "\205\013\153\014\157\015\163\016\150\017\155\020\141" +
    "\021\162\022\170\023\140\024\147\025\144\031\156\043" +
    "\020\044\167\045\160\046\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\002\143\011\137\012\270\013\153" +
    "\014\157\015\163\016\150\017\155\020\141\021\162\022" +
    "\170\023\140\024\147\025\144\031\156\043\020\044\167" +
    "\045\160\046\154\001\001\000\046\002\143\011\205\013" +
    "\153\014\157\015\163\016\150\017\155\020\141\021\162" +
    "\022\170\023\140\024\147\025\144\031\156\043\020\044" +
    "\167\045\160\046\154\001\001\000\020\010\272\025\042" +
    "\032\051\033\037\034\035\035\046\041\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\276\025\042\032\051\033\037\034\035\035\046\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\025" +
    "\042\032\106\033\037\034\304\035\046\041\043\001\001" +
    "\000\004\040\101\001\001\000\002\001\001\000\050\002" +
    "\143\011\137\012\307\013\153\014\157\015\163\016\150" +
    "\017\155\020\141\021\162\022\170\023\140\024\147\025" +
    "\144\031\156\043\020\044\167\045\160\046\154\001\001" +
    "\000\046\002\143\011\205\013\153\014\157\015\163\016" +
    "\150\017\155\020\141\021\162\022\170\023\140\024\147" +
    "\025\144\031\156\043\020\044\167\045\160\046\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\002\143\011" +
    "\137\012\316\013\153\014\157\015\163\016\150\017\155" +
    "\020\141\021\162\022\170\023\140\024\147\025\144\031" +
    "\156\043\020\044\167\045\160\046\154\001\001\000\046" +
    "\002\143\011\205\013\153\014\157\015\163\016\150\017" +
    "\155\020\141\021\162\022\170\023\140\024\147\025\144" +
    "\031\156\043\020\044\167\045\160\046\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\027\003\026\042\015\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    //Connect to the lexer
    Lexer lexer;
    public Boolean errorDisplayed = false;
    Map<String, ArrayList<String[]>> tablasDeSimbolos = new HashMap<>();
    String currentHash = "";

    @SuppressWarnings("deprecation")
    public parser(Lexer lexer) {
        this.lexer = lexer;
        this.symbolFactory = new DefaultSymbolFactory();

        //Inicializar tabla de simbolos Global
        currentHash = "Global";
        ArrayList<String[]> tabla = new ArrayList<>();
        String[] titulo = new String[1];
        titulo[0] = "Variables Globales";
        tabla.add(titulo);
        tablasDeSimbolos.put(currentHash, tabla);
    }

//Metodo para imprimir la tabla de simbolos
public void imprimirTablaSimbolos() {
    System.out.println("\n##### TABLAS DE SIMBOLOS #####");
    for (Map.Entry<String, ArrayList<String[]>> entry : tablasDeSimbolos.entrySet()) {
        System.out.println("\n##### " + entry.getKey() + " #####");
        for (String[] symbol : entry.getValue()) {
            System.out.println("Tipo: " + symbol[0] + " ID: " + symbol[1] + " Tipo de dato: " + symbol[2]); 
        }
    }
}


//Metodo para obtener un symbolo
public String[] getSymbol(List<String[]> tabla, String id) {
    for (int i = 1; i < tabla.size(); i++) {
        String[] symbol = tabla.get(i);
        if (symbol[1].equals(id)) {
            return symbol; // Devuelve el símbolo que coincide con el ID.
        }
    }
    return null; // Si no se encuentra el símbolo, devuelve null o maneja el caso según tus necesidades.
}

//Metodo para obtener los parametros de una funcion

     



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type ::= INTEGERTYPE 
            {
              Object RESULT =null;
		RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= FLOATTYPE 
            {
              Object RESULT =null;
		RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= BOOLEANTYPE 
            {
              Object RESULT =null;
		RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= CHARTYPE 
            {
              Object RESULT =null;
		RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= STRINGTYPE 
            {
              Object RESULT =null;
		RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n+":int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n+":float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literal ::= CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n+":char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literal ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n+":string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literal ::= BOOLEAN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n+":bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // aritmeticOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aritmeticOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aritmeticOp ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aritmeticOp ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aritmeticOp ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aritmeticOp ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operand ::= literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = n;    
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operand ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ArrayList<String[]> tabla = tablasDeSimbolos.get(currentHash);
                            String[] symbol = getSymbol(tabla, id.toString());
                            String tipoId = symbol[2];
                            System.out.println("tipo encontado para id: "+id+" es: "+tipoId);            
                            RESULT = id+":"+tipoId;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operand ::= callFunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // relationalOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relationalOp ::= DIFFERENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relationalOp ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relationalOp ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // relationalOp ::= GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // relationalOp ::= LESSEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logicalOp ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logicalOp ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aritmeticExpression ::= operand 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    RESULT = n; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aritmeticExpression ::= MINUS literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

    if (!String.valueOf(n).endsWith("int") && !String.valueOf(n).endsWith("float")) {
        System.out.println("Error semantico en la linea x: Operacion aritmetica no valida");
    }
    RESULT = "-"+n; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aritmeticExpression ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<String[]> tabla = tablasDeSimbolos.get(currentHash);
    String[] symbol = getSymbol(tabla, id.toString());
    String tipoId = symbol[2];

    System.out.println("tipo encontado para id: "+id+" es: "+tipoId);
    if (!tipoId.equals("int"))
    System.out.println("Error semantico en la linea x: No se permite el uso de incremento en variables de tipo: "+tipoId);  
    RESULT = id+":"+tipoId;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aritmeticExpression ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    ArrayList<String[]> tabla = tablasDeSimbolos.get(currentHash);
    String[] symbol = getSymbol(tabla, id.toString());
    String tipoId = symbol[2];

    System.out.println("tipo encontado para id: "+id+" es: "+tipoId);
    if (!tipoId.equals("int")){
        System.out.println("Error semantico en la linea x: No se permite el uso de decremento en variables de tipo: "+tipoId);  
    }
    RESULT = id+":"+tipoId;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aritmeticExpression ::= aritmeticExpression aritmeticOp aritmeticExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aritmeticExpression ::= LPAREN aritmeticExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmeticExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relationalExpression ::= aritmeticExpression relationalOp aritmeticExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logicalExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logicalExpression ::= logicalExpression logicalOp logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logicalExpression ::= LPAREN logicalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logicalExpression ::= NOT logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= aritmeticExpression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e; //Enviar solo el tipo de dato

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= logicalExpression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e; //Enviar solo el tipo de dato

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_struct ::= IF LPAREN expression RPAREN BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_struct",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_else_struct ::= if_struct ELSE BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else_struct",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while_struct ::= WHILE LPAREN logicalExpression RPAREN BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_struct",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while_else_struct ::= while_struct ELSE BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_else_struct",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for_range_struct ::= FOR SEPARATOR IDENTIFIER SEPARATOR IN SEPARATOR RANGE LPAREN aritmeticExpression COMMA aritmeticExpression COMMA aritmeticExpression RPAREN BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_range_struct",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for_range_struct ::= FOR SEPARATOR IDENTIFIER SEPARATOR IN SEPARATOR RANGE LPAREN aritmeticExpression COMMA aritmeticExpression RPAREN BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_range_struct",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_range_struct ::= FOR SEPARATOR IDENTIFIER SEPARATOR IN SEPARATOR RANGE LPAREN aritmeticExpression RPAREN BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_range_struct",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // default_statement ::= DEFAULT DOTS statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // case_statement ::= CASE SEPARATOR literal DOTS statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case_statements ::= case_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // case_statements ::= case_statements case_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // switch_struct ::= SWITCH LPAREN expression RPAREN BLOCKSTART case_statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_struct",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // switch_struct ::= SWITCH LPAREN expression RPAREN BLOCKSTART case_statements default_statement BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_struct",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // switch_struct ::= SWITCH LPAREN expression RPAREN BLOCKSTART default_statement BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_struct",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // varIdentifier ::= type SEPARATOR IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //Agregar id a la tabla de simbolos
    String[] symbol = new String[3];
    symbol[0] = "Variable";
    symbol[1] = idVar.toString();
    symbol[2] = t.toString();

    tablasDeSimbolos.get(currentHash).add(symbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varIdentifier",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decl ::= varIdentifier ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment ::= IDENTIFIER ASSIGN expression ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decl_and_assignment ::= varIdentifier ASSIGN expression ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_and_assignment",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // readData ::= READ READSYMBOL IDENTIFIER ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readData",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // printData ::= PRINT PRINTSYMBOL expression ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printData",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sendParameters ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sendParameters",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sendParameters ::= sendParameters COMMA expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sendParameters",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // callFunction ::= IDENTIFIER LPAREN sendParameters RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actualParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actualParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object actualParams = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
/*
    if (tablasDeSimbolos.containsKey(id.toString())) { //Verificar si la funcion existe
        ArrayList<String[]> tabla = tablasDeSimbolos.get(id.toString()); //Obtener la tabla de simbolos de la funcion
        String[] titulo = tabla.get(0); //Obtener el titulo de la tabla de simbolos de la funcion

        if (titulo[0].equals("main")) { //Verificar si la funcion es main
            System.out.println("Error semantico en la linea x: La función main no recibe parametros");
        }

        // Verificar si los parametros enviados coinciden con los parametros de la funcion
        for ()

      
    }else{
        System.out.println("Error semantico en la linea x: La funcion "+id.toString()+" no existe");
    }
   */       


              CUP$parser$result = parser.getSymbolFactory().newSymbol("callFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // callFunction ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // callFunction_statement ::= callFunction ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callFunction_statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // return_statement ::= RETURN SEPARATOR expression ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // return_statement ::= RETURN ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // break_statement ::= BREAK ENDLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= decl_and_assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= readData 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= printData 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= callFunction_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= if_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= if_else_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= while_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= while_else_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= for_range_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= switch_struct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parameter ::= type SEPARATOR IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    ArrayList<String[]> tabla = tablasDeSimbolos.get(currentHash);

     // Verificar si el parámetro ya existe en la tabla
    boolean exists = false;
    /*
    for (String[] symbol : tabla) {
        if (symbol[0].equals("Parametro") && symbol[1].equals(idParamString)) {
            System.out.println("Error semantico en la linea x: El parametro "+idParamString+" ya existe");
            exists = true;
            break;
        }
    }*/

    if (!exists) {
        // Agregar el parámetro solo si no existe en la tabla
        String[] symbol = new String[3];
        symbol[0] = "Parametro";
        symbol[1] = idParam.toString();
        symbol[2] = t.toString();
        tabla.add(symbol);

        tablasDeSimbolos.put(currentHash, tabla);
    }

    //Agregar id a la tabla de simbolos
    String[] symbol = new String[3];
    symbol[0] = "Parametro";
    symbol[1] = idParam.toString();
    symbol[2] = t.toString();

    tablasDeSimbolos.get(currentHash).add(symbol);
   

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameters ::= parameters COMMA parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameters ::= errors 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // functionIdentifier ::= type SEPARATOR IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idFunc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

// Crear tabla de simbolos para la funcion

    String tipoTabla = "main";
    if (idFunc.toString().equals("main")){
    tipoTabla = "Tipo: main: "+t.toString();
    }
    else{
    tipoTabla = "Tipo: funcion: "+t.toString();
    }

    ArrayList<String[]> tabla = new ArrayList<>();
    String[] titulo = new String[1];
    titulo[0] = tipoTabla;
    tabla.add(titulo);
    tablasDeSimbolos.put(currentHash, tabla);
   

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionIdentifier",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function ::= functionIdentifier LPAREN parameters RPAREN BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function ::= functionIdentifier LPAREN RPAREN BLOCKSTART statements BLOCKEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // functions ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // functions ::= functions function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // functions ::= errors 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // globalVariable ::= decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVariable",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // globalVariable ::= decl_and_assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVariable",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // globalVariables ::= globalVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVariables",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // globalVariables ::= globalVariables globalVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVariables",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // program ::= globalVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // program ::= functions 
            {
              Object RESULT =null;
		
   // imprimirTablaSimbolos();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // program ::= globalVariables functions 
            {
              Object RESULT =null;
		
   // imprimirTablaSimbolos();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // error_recovery ::= ERROR_RECOVERY 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (!errorDisplayed){
        System.out.println("EL ARCHIVO FUENTE NO PUEDE SER GENERADO POR LA GRAMÁTICA \n\nERRORS:\n ");
        errorDisplayed = true;
    } 
    System.out.println("[ERROR] Caracter Invalido: "+err);
                                        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_recovery",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // error_recovery ::= IDENTIFIER 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

    //MANEJO DE ERRORES
    if (!errorDisplayed){
        System.out.println("EL ARCHIVO FUENTE NO PUEDE SER GENERADO POR LA GRAMÁTICA \n\nERRORS:\n ");
        errorDisplayed = true;
    }   
    System.out.println("[ERROR] Statement Out of Place: "+err); 
                    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_recovery",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // errors ::= error_recovery 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // errors ::= errors error_recovery 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
